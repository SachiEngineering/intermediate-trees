'''
Print Tree by Level

Given a binary tree, return a list of lists of the nodes' values organized as a level-by-level view from left to right.
 

EXAMPLE(S)
Input:
   3
 2  4
1    5

Output:
[[3], [2, 4], [1, 5]]
 

FUNCTION SIGNATURE
function levelOrder(root) {
def levelOrder(node: Node) -> list[list[int]]:
'''

class Node:
    def __init__(self, value, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right

def levelOrder(node):
    if not node:
        return []

    result = [] 
    queue = [node] 

    while queue:
        level_size = len(queue) 
        current_level = []  

        for i in range(level_size): #for each node in this level
            current_node = queue.pop(0) 
            current_level.append(current_node.value) 

            
            if current_node.left:
                queue.append(current_node.left)
            
            if current_node.right:
                queue.append(current_node.right)

       
        result.append(current_level)

    return result

root = Node(3,Node(2,Node(1)),Node(4,None,Node(5)))
root2 = Node(3, 9, Node(20, 15, 7))
print(levelOrder(root))  # Output: [[3], [2, 4], [1, 5]]
