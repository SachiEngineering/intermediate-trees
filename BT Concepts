class Node:
    def __init__(self, value, left=None, right=None):
        # Initialize a tree node with a value and optional left and right children
        self.value = value
        self.left = left
        self.right = right

##############################################################################
# Given a binary tree and k, count the number of nodes that are divisible by k in tree.
# Examples

# Input:
#           1 
#         /    \
#       3       2
#      / \      / \
#    3   6   7   12
# k: 3
# Output: 4 (3, 3, 6, 12 are divisible by 3)
# Function Signature

def countMultiplesOfKTree(root, k):
    if not root:
        return 0

    result = [0]

    def dfs(node, k):
        if not node:
            return
        if node.value % k == 0:
            result[0] += 1

        dfs(node.left, k)
        dfs(node.right, k)

    dfs(root, k)

    return result[0]

trial = Node(1,Node(3, Node(3), Node(6)), Node(2,Node(7),Node(12)))
print(countMultiplesOfKTree(trial, 3))

#############################################################################
# Given a binary tree and k, sum first k levels in tree, where the root node is at level 0. If k exceeds the maximum level of a given tree, return -1.
# Examples

# Input:
#           1
#             \
#               2
#                 \
#                  4
# k = 1
# Output: 3 (1+2; 4 is below the level 1.)

def sumAboveKLevelTree(root, k):
    if not root:
        return -1

    _sum = [0]
    level = [0]

    def dfs(node, k, level):
        if not node:
            return
        
        if level[0] <= k:
            _sum[0] += node.value
        
        #update level
        level[0] += 1

        dfs(node.left, k, level)
        dfs(node.right, k, level)

    dfs(root, k, level)

    return _sum[0]

trial = Node(1, None, Node(2, None, Node(4)))
print(sumAboveKLevelTree(trial, 1))

#############################################################################
# Find Violating Node in BST
# Given a binary search tree that has up to one violating node, return the value of the violating node. When there is a violation, return the lowest node. If there is no violating node, return -1.
# Examples

# Input:
#           5 
#         /    \
#       2      10
#        \
#         8
# Output: 8 (8 is not less than 5)

def findViolatingNodeInBST(root):
    if not root:
        return -1

    def helper(node, mini, maxi):
        if not node:
            return None
        if not (mini<node.value<maxi):
            return node.value

        left = helper(node.left,   mini,       node.value)
        right = helper(node.right, node.value, maxi)

        if left != None: #if violation on the left
            return left
        else:           #return right
            return right

    result = helper(root, float('-inf'), float('inf'))
    
    if result != None:
        return result
    else:
        return -1

#________________________________________________

trial = Node(5, Node(2, None, Node(8)),Node(10))
print(findViolatingNodeInBST(trial))  

##############################################################################
# Given a binary tree, return the most frequent value in the tree.
# Examples

# Input:
#           1 
#         /    \
#       2       3
#      / \      / \
#    2   3     2   2
# Output: 2
# Function Signature


# Clarifying Questions
# Q. What if there are multiple values that equally most frequent?
# A. Return any at random.
        
def mostFrequentNumberBT(root):
    if not root:
        return None

    frequency = {}

    def dfs(node):
        if not node:
            return

        if node.value in frequency:
            frequency[node.value] += 1
        else:
            frequency[node.value] = 1

        dfs(node.left)
        dfs(node.right)

    dfs(root)

    # Find the node value with the least frequency. use key= to get values instead of key
    most_occurring_value = max(frequency, key=frequency.get)
    
    # Return a new TreeNode with the least occurring value
    return most_occurring_value

trial = Node(1, Node(2, Node(2), Node(3)), Node(3, Node(2), Node(2)))
print(mostFrequentNumberBT(trial))

##############################################################################
# Given a binary tree, sum all leaf nodes' values.
# Examples

# Input:
#           1 
#         /    \
#       2       2
#      / \      / \
#    3   4     0   1
# Output: 8 (3 + 4 + 0 + 1 = 8)

def sumLeafNodes(root):
    if not root:
        return 0

    _sum = [0]
    def dfs(node):
        if not node:
            return 0

        if not node.right and not node.left:
            _sum[0] += node.value

        dfs(node.left)
        dfs(node.right)

    dfs(root)

    return _sum[0]

trial = Node(1, Node(2, Node(3), Node(4)), Node(2, Node(0), Node(1)))
print(sumLeafNodes(trial))

##############################################################################
# Given a binary tree, return the sum of the level with highest sum of values.
# Examples

# Input:
#           1 
#         /    \
#       2      12
#      / \      / \
#    3   4     0   3
# Output: 14 (2 + 12 is the biggest level sum)

def biggestLevelSumTree(root):
    if not root:
        return 0


    queue = [root]
    maxSum = float('-inf')


   
    while queue:
        currSum = 0
        levelSize = len(queue)

        for i in range(levelSize):
            node = queue.pop(0)
            currSum += node.value

            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)
            
        maxSum = max(maxSum, currSum)

    return maxSum

trial = Node(1, Node(2, Node(3), Node(4)), Node(12,Node(0), Node(3)))
print(biggestLevelSumTree(trial))





